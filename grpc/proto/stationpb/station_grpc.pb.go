// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.22.3
// source: grpc/proto/station.proto

package stationpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StationPassagerNumServiceClient is the client API for StationPassagerNumService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StationPassagerNumServiceClient interface {
	GetPassagerNum(ctx context.Context, in *GPNRequest, opts ...grpc.CallOption) (*GPNReply, error)
	ReducePassagerNum(ctx context.Context, in *RPNRequest, opts ...grpc.CallOption) (*RPNReply, error)
}

type stationPassagerNumServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStationPassagerNumServiceClient(cc grpc.ClientConnInterface) StationPassagerNumServiceClient {
	return &stationPassagerNumServiceClient{cc}
}

func (c *stationPassagerNumServiceClient) GetPassagerNum(ctx context.Context, in *GPNRequest, opts ...grpc.CallOption) (*GPNReply, error) {
	out := new(GPNReply)
	err := c.cc.Invoke(ctx, "/station.StationPassagerNumService/GetPassagerNum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stationPassagerNumServiceClient) ReducePassagerNum(ctx context.Context, in *RPNRequest, opts ...grpc.CallOption) (*RPNReply, error) {
	out := new(RPNReply)
	err := c.cc.Invoke(ctx, "/station.StationPassagerNumService/ReducePassagerNum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StationPassagerNumServiceServer is the server API for StationPassagerNumService service.
// All implementations must embed UnimplementedStationPassagerNumServiceServer
// for forward compatibility
type StationPassagerNumServiceServer interface {
	GetPassagerNum(context.Context, *GPNRequest) (*GPNReply, error)
	ReducePassagerNum(context.Context, *RPNRequest) (*RPNReply, error)
	mustEmbedUnimplementedStationPassagerNumServiceServer()
}

// UnimplementedStationPassagerNumServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStationPassagerNumServiceServer struct {
}

func (UnimplementedStationPassagerNumServiceServer) GetPassagerNum(context.Context, *GPNRequest) (*GPNReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPassagerNum not implemented")
}
func (UnimplementedStationPassagerNumServiceServer) ReducePassagerNum(context.Context, *RPNRequest) (*RPNReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReducePassagerNum not implemented")
}
func (UnimplementedStationPassagerNumServiceServer) mustEmbedUnimplementedStationPassagerNumServiceServer() {
}

// UnsafeStationPassagerNumServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StationPassagerNumServiceServer will
// result in compilation errors.
type UnsafeStationPassagerNumServiceServer interface {
	mustEmbedUnimplementedStationPassagerNumServiceServer()
}

func RegisterStationPassagerNumServiceServer(s grpc.ServiceRegistrar, srv StationPassagerNumServiceServer) {
	s.RegisterService(&StationPassagerNumService_ServiceDesc, srv)
}

func _StationPassagerNumService_GetPassagerNum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GPNRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StationPassagerNumServiceServer).GetPassagerNum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/station.StationPassagerNumService/GetPassagerNum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StationPassagerNumServiceServer).GetPassagerNum(ctx, req.(*GPNRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StationPassagerNumService_ReducePassagerNum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RPNRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StationPassagerNumServiceServer).ReducePassagerNum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/station.StationPassagerNumService/ReducePassagerNum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StationPassagerNumServiceServer).ReducePassagerNum(ctx, req.(*RPNRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StationPassagerNumService_ServiceDesc is the grpc.ServiceDesc for StationPassagerNumService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StationPassagerNumService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "station.StationPassagerNumService",
	HandlerType: (*StationPassagerNumServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPassagerNum",
			Handler:    _StationPassagerNumService_GetPassagerNum_Handler,
		},
		{
			MethodName: "ReducePassagerNum",
			Handler:    _StationPassagerNumService_ReducePassagerNum_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/proto/station.proto",
}
