# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import rpc_pb2 as rpc__pb2


class RPCStub(object):
    """The greeting service definition.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.get_num = channel.unary_unary(
            '/rpc.RPC/get_num',
            request_serializer=rpc__pb2.RpcRequest.SerializeToString,
            response_deserializer=rpc__pb2.RpcReply.FromString,
        )


class RPCServicer(object):
    """The greeting service definition.
    """

    def get_num(self, request, context):
        """Sends a request
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RPCServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'get_num': grpc.unary_unary_rpc_method_handler(
            servicer.get_num,
            request_deserializer=rpc__pb2.RpcRequest.FromString,
            response_serializer=rpc__pb2.RpcReply.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'rpc.RPC', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))

 # This class is part of an EXPERIMENTAL API.


class RPC(object):
    """The greeting service definition.
    """

    @staticmethod
    def get_num(request,
                target,
                options=(),
                channel_credentials=None,
                call_credentials=None,
                insecure=False,
                compression=None,
                wait_for_ready=None,
                timeout=None,
                metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rpc.RPC/get_num',
                                             rpc__pb2.RpcRequest.SerializeToString,
                                             rpc__pb2.RpcReply.FromString,
                                             options, channel_credentials,
                                             insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
